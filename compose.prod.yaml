# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
name: hyt-poc
services:
  hyt-poc-java-app:
    container_name: hyt-poc-java-app
    build:
      context: ./backend
      target: development
    ports:
      - 8080:8080
    depends_on:
      hyt-poc-db:
        condition: service_healthy
    networks:
      - app-network
    secrets:
      - db-password
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://hyt-poc-db:5432/hyt-poc-db
      - SPRING_DATASOURCE_USERNAME=hyt-poc-user
      - SPRING_DATASOURCE_PASSWORD=hyt-poc-password

  hyt-poc-react-app:
    container_name: hyt-poc-react-app
    build:
      context: ./frontend
      target: prod
      args:
        - REACT_APP_API_URL=http://localhost:8080  # Pass as build arg
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:8080
    ports:
      - 3000:3000
    depends_on:
      - hyt-poc-java-app
    networks:
      - app-network
  hyt-poc-db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=hyt-poc-db
      - POSTGRES_USER=hyt-poc-user
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "hyt-poc-db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
networks:
  app-network:
    driver: bridge
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt